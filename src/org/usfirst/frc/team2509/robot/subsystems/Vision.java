// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2509.robot.subsystems;

import java.util.ArrayList;
import java.util.Iterator;

import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Vision extends Subsystem {
	private int 
		CENTER[],
		WIDTH[];
	private ArrayList<MatOfPoint>
		contours = new ArrayList<MatOfPoint>();
	private final CvSink
		CVSINK = CameraServer.getInstance().getVideo("GEAR");
	private final CvSource 
		OUTPUT_STREAM = CameraServer.getInstance().putVideo("ALT-Cam", 640, 480);
	private final Mat
		BINARY = new Mat(),
		BLUR = new Mat(),
		CONTOURS = new Mat(),
		HEIRARCHY = new Mat(),
		HSV = new Mat(),
		THRESH = new Mat();
	protected final Scalar 
	//COLOR VALUES
		BLACK = new Scalar(0,0,0),
		BLUE = new Scalar(255, 0, 0),
		GREEN = new Scalar(0, 255, 0),
		RED = new Scalar(0, 0, 255),
		YELLOW = new Scalar(0, 255, 255),
		//Thresholds values
		LOWER_BOUNDS = new Scalar(180,190,40),
		UPPER_BOUNDS = new Scalar(200,210,60);
	
    public void initDefaultCommand() {
    }
    public void filterImage(Mat source){
    	new Thread(()->{
    		while(true){
    		contours.clear();
    		CVSINK.grabFrame(source);
    		Imgproc.cvtColor(source, HSV, Imgproc.COLOR_BGR2RGB);
    		Imgproc.threshold(HSV, BINARY, 180, 200, Imgproc.THRESH_BINARY);	
    		Imgproc.cvtColor(BINARY, THRESH, Imgproc.COLOR_BGR2GRAY);
    		Imgproc.findContours(THRESH, contours, HEIRARCHY, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);
    		for(MatOfPoint mop :contours){
    			Rect rec = Imgproc.boundingRect(mop);
    			Imgproc.rectangle(source, rec.br(), rec.tl(), RED);
    		}
    		for(Iterator<MatOfPoint> iterator = contours.iterator();iterator.hasNext();){
    			MatOfPoint matOfPoint = (MatOfPoint) iterator.next();
    			Rect rec = Imgproc.boundingRect(matOfPoint);
    			
    		}
    		for(int j=0;j<=contours.size();j++){
    			Rect rec = Imgproc.boundingRect(contours.get(j));
    			CENTER[j] = rec.x;
    			WIDTH[j] = rec.width;
    			SmartDashboard.putInt("Contour " + j, CENTER[j]);
    			SmartDashboard.putDouble("Contour Width " + j, WIDTH[j]);
    		}
    		OUTPUT_STREAM.putFrame(source);
    		}
    	}).start();
    }
}

